/*
 * This file is generated by jOOQ.
 */
package keywhiz.jooq.tables;


import java.util.Arrays;
import java.util.List;

import keywhiz.jooq.Indexes;
import keywhiz.jooq.Keys;
import keywhiz.jooq.KeywhizdbTest;
import keywhiz.jooq.tables.records.SecretsRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row12;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Secrets extends TableImpl<SecretsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>keywhizdb_test.secrets</code>
     */
    public static final Secrets SECRETS = new Secrets();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SecretsRecord> getRecordType() {
        return SecretsRecord.class;
    }

    /**
     * The column <code>keywhizdb_test.secrets.id</code>.
     */
    public final TableField<SecretsRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>keywhizdb_test.secrets.name</code>.
     */
    public final TableField<SecretsRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>keywhizdb_test.secrets.updatedat</code>.
     */
    public final TableField<SecretsRecord, Long> UPDATEDAT = createField(DSL.name("updatedat"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>keywhizdb_test.secrets.createdat</code>.
     */
    public final TableField<SecretsRecord, Long> CREATEDAT = createField(DSL.name("createdat"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>keywhizdb_test.secrets.description</code>.
     */
    public final TableField<SecretsRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>keywhizdb_test.secrets.createdby</code>.
     */
    public final TableField<SecretsRecord, String> CREATEDBY = createField(DSL.name("createdby"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>keywhizdb_test.secrets.updatedby</code>.
     */
    public final TableField<SecretsRecord, String> UPDATEDBY = createField(DSL.name("updatedby"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>keywhizdb_test.secrets.type</code>.
     */
    public final TableField<SecretsRecord, String> TYPE = createField(DSL.name("type"), SQLDataType.VARCHAR(20), this, "");

    /**
     * The column <code>keywhizdb_test.secrets.options</code>.
     */
    public final TableField<SecretsRecord, String> OPTIONS = createField(DSL.name("options"), SQLDataType.VARCHAR(255).nullable(false).defaultValue(DSL.inline("{}", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>keywhizdb_test.secrets.current</code>.
     */
    public final TableField<SecretsRecord, Long> CURRENT = createField(DSL.name("current"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>keywhizdb_test.secrets.row_hmac</code>.
     */
    public final TableField<SecretsRecord, String> ROW_HMAC = createField(DSL.name("row_hmac"), SQLDataType.VARCHAR(64).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>keywhizdb_test.secrets.owner</code>.
     */
    public final TableField<SecretsRecord, Long> OWNER = createField(DSL.name("owner"), SQLDataType.BIGINT, this, "");

    private Secrets(Name alias, Table<SecretsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Secrets(Name alias, Table<SecretsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>keywhizdb_test.secrets</code> table reference
     */
    public Secrets(String alias) {
        this(DSL.name(alias), SECRETS);
    }

    /**
     * Create an aliased <code>keywhizdb_test.secrets</code> table reference
     */
    public Secrets(Name alias) {
        this(alias, SECRETS);
    }

    /**
     * Create a <code>keywhizdb_test.secrets</code> table reference
     */
    public Secrets() {
        this(DSL.name("secrets"), null);
    }

    public <O extends Record> Secrets(Table<O> child, ForeignKey<O, SecretsRecord> key) {
        super(child, key, SECRETS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : KeywhizdbTest.KEYWHIZDB_TEST;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.SECRETS_OWNER_IDX, Indexes.SECRETS_SECRETS_CURRENT_IDX);
    }

    @Override
    public Identity<SecretsRecord, Long> getIdentity() {
        return (Identity<SecretsRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<SecretsRecord> getPrimaryKey() {
        return Keys.KEY_SECRETS_PRIMARY;
    }

    @Override
    public List<UniqueKey<SecretsRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_SECRETS_NAME);
    }

    @Override
    public Secrets as(String alias) {
        return new Secrets(DSL.name(alias), this);
    }

    @Override
    public Secrets as(Name alias) {
        return new Secrets(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Secrets rename(String name) {
        return new Secrets(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Secrets rename(Name name) {
        return new Secrets(name, null);
    }

    // -------------------------------------------------------------------------
    // Row12 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row12<Long, String, Long, Long, String, String, String, String, String, Long, String, Long> fieldsRow() {
        return (Row12) super.fieldsRow();
    }
}
