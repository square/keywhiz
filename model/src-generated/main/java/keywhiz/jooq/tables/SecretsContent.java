/*
 * This file is generated by jOOQ.
 */
package keywhiz.jooq.tables;


import java.util.Arrays;
import java.util.List;

import keywhiz.jooq.Indexes;
import keywhiz.jooq.Keys;
import keywhiz.jooq.KeywhizdbTest;
import keywhiz.jooq.tables.records.SecretsContentRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row11;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SecretsContent extends TableImpl<SecretsContentRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>keywhizdb_test.secrets_content</code>
     */
    public static final SecretsContent SECRETS_CONTENT = new SecretsContent();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SecretsContentRecord> getRecordType() {
        return SecretsContentRecord.class;
    }

    /**
     * The column <code>keywhizdb_test.secrets_content.id</code>.
     */
    public final TableField<SecretsContentRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>keywhizdb_test.secrets_content.secretid</code>.
     */
    public final TableField<SecretsContentRecord, Long> SECRETID = createField(DSL.name("secretid"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>keywhizdb_test.secrets_content.updatedat</code>.
     */
    public final TableField<SecretsContentRecord, Long> UPDATEDAT = createField(DSL.name("updatedat"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>keywhizdb_test.secrets_content.createdat</code>.
     */
    public final TableField<SecretsContentRecord, Long> CREATEDAT = createField(DSL.name("createdat"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>keywhizdb_test.secrets_content.createdby</code>.
     */
    public final TableField<SecretsContentRecord, String> CREATEDBY = createField(DSL.name("createdby"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>keywhizdb_test.secrets_content.updatedby</code>.
     */
    public final TableField<SecretsContentRecord, String> UPDATEDBY = createField(DSL.name("updatedby"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>keywhizdb_test.secrets_content.encrypted_content</code>.
     */
    public final TableField<SecretsContentRecord, String> ENCRYPTED_CONTENT = createField(DSL.name("encrypted_content"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>keywhizdb_test.secrets_content.metadata</code>.
     */
    public final TableField<SecretsContentRecord, String> METADATA = createField(DSL.name("metadata"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>keywhizdb_test.secrets_content.expiry</code>.
     */
    public final TableField<SecretsContentRecord, Long> EXPIRY = createField(DSL.name("expiry"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>keywhizdb_test.secrets_content.content_hmac</code>.
     */
    public final TableField<SecretsContentRecord, String> CONTENT_HMAC = createField(DSL.name("content_hmac"), SQLDataType.VARCHAR(64).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>keywhizdb_test.secrets_content.row_hmac</code>.
     */
    public final TableField<SecretsContentRecord, String> ROW_HMAC = createField(DSL.name("row_hmac"), SQLDataType.VARCHAR(64).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "");

    private SecretsContent(Name alias, Table<SecretsContentRecord> aliased) {
        this(alias, aliased, null);
    }

    private SecretsContent(Name alias, Table<SecretsContentRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>keywhizdb_test.secrets_content</code> table
     * reference
     */
    public SecretsContent(String alias) {
        this(DSL.name(alias), SECRETS_CONTENT);
    }

    /**
     * Create an aliased <code>keywhizdb_test.secrets_content</code> table
     * reference
     */
    public SecretsContent(Name alias) {
        this(alias, SECRETS_CONTENT);
    }

    /**
     * Create a <code>keywhizdb_test.secrets_content</code> table reference
     */
    public SecretsContent() {
        this(DSL.name("secrets_content"), null);
    }

    public <O extends Record> SecretsContent(Table<O> child, ForeignKey<O, SecretsContentRecord> key) {
        super(child, key, SECRETS_CONTENT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : KeywhizdbTest.KEYWHIZDB_TEST;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.SECRETS_CONTENT_CREATEDAT_IDX, Indexes.SECRETS_CONTENT_SECRETID_IDX, Indexes.SECRETS_CONTENT_SECRETS_CONTENT_EXPIRY);
    }

    @Override
    public Identity<SecretsContentRecord, Long> getIdentity() {
        return (Identity<SecretsContentRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<SecretsContentRecord> getPrimaryKey() {
        return Keys.KEY_SECRETS_CONTENT_PRIMARY;
    }

    @Override
    public SecretsContent as(String alias) {
        return new SecretsContent(DSL.name(alias), this);
    }

    @Override
    public SecretsContent as(Name alias) {
        return new SecretsContent(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public SecretsContent rename(String name) {
        return new SecretsContent(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SecretsContent rename(Name name) {
        return new SecretsContent(name, null);
    }

    // -------------------------------------------------------------------------
    // Row11 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row11<Long, Long, Long, Long, String, String, String, String, Long, String, String> fieldsRow() {
        return (Row11) super.fieldsRow();
    }
}
